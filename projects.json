[
  {
    "title": "Robust Deepfake Detection with Gradient Regularization",
    "emoji": "üß†",
    "description": "",
    "tech": [
      "Python",
      "PyTorch",
      "EfficientNet",
      "DFFD dataset"
    ],
    "details": "Built a robust deepfake detection system for a Computer Vision course project using EfficientNetB0 and gradient regularization. Improved generalization by penalizing reliance on shallow texture patterns via perturbed feature statistics. Evaluated robustness under FGSM and PGD attacks. Dataset curated by combining FaceForensics++ frames and DFFD to address class imbalance. Developed collaboratively with a classmate.",
    "github": "https://github.com/lizatskhe/cv-project2"
  },
  {
    "title": "Cultural Bias Classification",
    "emoji": "üåç",
    "description": "Classifying culturally agnostic vs. culturally representative concepts using feature engineering and ML models.",
    "tech": [
      "Python",
      "scikit-learn",
      "pandas",
      "Random Forest",
      "DistilBERT"
    ],
    "details": "Built a pipeline to detect cultural bias in multilingual data using both traditional ML (Random Forests) and fine-tuned language models (DistilBERT). Engineered features from Wikidata entries and addressed class imbalance with weighted loss functions. Also applied LLMs (Phi-3, Llama-3) for OCR error correction and evaluated their output using ROUGE and human agreement metrics. Achieved strong performance with interpretable results and robust cross-model evaluation.",
    "github": "https://github.com/lizatskhe/cultural-bias-classification/tree/main"
  },
  {
    "title": "OCRed Text Cleaning & Preprocessing",
    "emoji": "üßπ",
    "description": "Cleaned and structured noisy OCR output for downstream NLP tasks using Python-based text processing.",
    "tech": [
      "Python", "Llama", "Phi-3",
      "Gemini-2.0",
      "Pandas"
    ],
    "details": "Developed a pipeline for correcting OCR errors in historical texts using open-source large language models (Llama-3 8B and Phi-3 Mini). Evaluated model outputs with automatic metrics (ROUGE), human annotation, and LLM-based judgment (Gemini-2.0). Conducted detailed correlation analysis to compare evaluation methods and fine-tuned post-processing for cleaner outputs. Achieved high agreement between LLM and human scores, demonstrating the models' effectiveness in realistic text restoration tasks.",
    "github": "https://github.com/lizatskhe/ocr-text-cleaning"
  },
  {
    "title": "Animated Origami Flower Simulation",
    "emoji": "üå∏",
    "description": "WebGL simulation of a procedurally animated origami tulip with realistic folding and lighting.",
    "tech": [
      "WebGL",
      "GLSL",
      "JavaScript",
      "3D transformation matrices"
    ],
    "details": "Created a dynamic 3D animation of a tulip folding from a flat sheet using WebGL. Implemented procedural mesh generation, realistic folding behavior, dynamic lighting, shadows, and interactive camera controls. The project explores the intersection of computer graphics and generative art.",
    "github": "https://github.com/lizatskhe/origami-flower"
  },
  {
    "title": "Pacman AI Agent",
    "emoji": "üëæ",
    "description": "Designed and implemented AI agents for the Pacman game using search algorithms and reinforcement learning.",
    "tech": [
      "Python",
      "A* Search",
      "Reinforcement Learning"
    ],
    "details": "Developed a team of intelligent agents for the Pacman AI Capture the Flag contest using Python. Implemented offensive and defensive reflex-based agents that utilize A* search, dynamic feature evaluation, and adaptive strategies to optimize food collection, evade ghosts, and defend territory. ",
    "github": "https://github.com/lizatskhe/pacman-ctf/tree/main"
  },
  {
    "title": "CartPole Reinforcement Learning",
    "emoji": "üéØ",
    "description": "Implemented multiple RL algorithms to train an agent to balance a pole on a cart in a simulated environment.",
    "tech": [
      "Python",
      "OpenAI Gym",
      "TensorFlow/PyTorch",
      "Q-Learning"
    ],
    "details": "Implemented and evaluated the SARSA algorithm to solve the classic CartPole balancing problem. Explored on-policy reinforcement learning by discretizing the state space and using SARSA to update the Q-table based on action-value pairs. ",
    "github": "https://github.com/lizatskhe/cartpole-sarsa/tree/main"
  }
]